" Author: fcrh
" Email: coquelicot1117@gmail.com

" Plugins {{{ ----------------------------------------------------------------

" Auto install
if empty(glob("~/.vim/autoload/plug.vim"))
    !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.github.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Plugins
call plug#begin('~/.vim/plugged')
Plug 'scrooloose/nerdtree'
Plug 'vim-syntastic/syntastic'
Plug 'majutsushi/tagbar'
Plug 'tpope/vim-surround'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'ap/vim-buftabline'
Plug 'mbbill/undotree'
Plug 'coquelicot/local-vimrc'
Plug 'airblade/vim-gitgutter'
call plug#end()

" }}}

" Basic setting {{{ ----------------------------------------------------------

syntax on
colorscheme elflord

set exrc
set modeline
set modelines=5

set number
set ruler
set showcmd
set cursorline

set backspace=2

set expandtab
set shiftwidth=4
set tabstop=4
set softtabstop=4

set scrolloff=5

set hlsearch
set incsearch
set ignorecase
set smartcase

set autoindent
set copyindent

set foldmarker={{{,}}}
set foldmethod=marker

set mouse=a

set wildmenu
set wildignore=*.swp,*un~,*.o,*.pyc,*.class

set title

set hidden
set confirm

set backup
set undofile
set backupcopy=yes

set lazyredraw

" For Unix and Win32, if a directory ends in two path separators "//" or "\\", 
" the swap file name will be built from the complete path to the file with all
" path separators substituted to percent '%' signs. This will ensure file name
" uniqueness in the preserve directory.
set backupdir=~/.vim/backup//
set undodir=~/.vim/undo//
set dir=~/.vim/swp//

" }}}

" Keycodes {{{ ---------------------------------------------------------------

" remap leader
let mapleader=" "

" shortten the timeout of keycode
set ttimeoutlen=150

" bracketed paste prefix
execute "set <f13>=\<ESC>[200~"
" bracketed paste suffix
execute "set <f14>=\<ESC>[201~"

" }}}

" Mapping {{{ ----------------------------------------------------------------

nnoremap <LEADER>s :shell<CR>
nnoremap <LEADER>p :!python<CR>
nnoremap <LEADER>r :!./%<CR>

" NERDTree required
nnoremap <LEADER>f :NERDTreeFocus<CR>

" Tagbar required
nnoremap <LEADER>t :TagbarToggle<CR>

" CtrlP required
nnoremap <C-b> :CtrlPMRU<CR>

" Undotree
nnoremap <LEADER>u :UndotreeToggle<CR>:UndotreeFocus<CR>

" get rid of highlight search
nnoremap <LEADER><LEADER> :nohlsearch<CR>

" search selected text
vnoremap * y/<C-r>"<CR>
" replace selected text
vnoremap <C-r> y:%s/<C-r>"/

" ctags helper
nnoremap <LEADER>F g<C-]>

" reselect
vnoremap > >gv
vnoremap < <gv

nnoremap ; :

" move to next/previous row instead of line
nnoremap j gj
nnoremap k gk

" buffer helper
function! BufferClose()
    " close whole vim if this is the last buffer
    if len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
        return ":q\n"
    else
        return ":bd\n"
    endif
endfunction
nnoremap <C-l> :bnext<CR>
nnoremap <C-h> :bprev<CR>
nnoremap <expr> <C-d> BufferClose()

" clear screen
nnoremap <LEADER>l :redraw!<CR>

" Ctrl-C
nnoremap <C-c> :q<CR>

" https://github.com/peter50216/dotfiles/blob/master/config/vimrc
inoremap jk <ESC>
nnoremap ^ 0
nnoremap 0 ^
vnoremap ^ 0
vnoremap 0 ^

" }}}

" Paste {{{ ------------------------------------------------------------------
" http://stackoverflow.com/questions/5585129

if &term =~ "xterm.*" || exists("$TMUX")

    " enable/disable bracketed paste mode
    let &t_ti = &t_ti . "\e[?2004h"
    let &t_te = "\e[?2004l" . &t_te

    function! XTermPasteBegin(ret)
        " stop paste mode when bracketed end
        set pastetoggle=<f14>
        " start paste mode
        set paste
        " extra command code to which it'll be mapped
        return a:ret
    endfunction

    nnoremap <expr> <f13> XTermPasteBegin("i")
    inoremap <expr> <f13> XTermPasteBegin("")
    vnoremap <expr> <f13> XTermPasteBegin("c")

    " do nothing when we're in command mode
    cnoremap <f13> <nop>
    cnoremap <f14> <nop>

endif

" }}}

" Specialization {{{ ---------------------------------------------------------

" c,cpp
autocmd FileType c,cpp nnoremap <buffer> <LEADER>r :!./%<<CR>
autocmd Filetype c,cpp setlocal cindent
autocmd Filetype c,cpp setlocal makeprg=g++\ -O2\ -std=c++11\ %\ -o\ %<

" makefile
autocmd Filetype make setlocal noexpandtab

" html,css,js
autocmd Filetype htmldjango,html,css,javascript setlocal shiftwidth=2
autocmd Filetype htmldjango,html,css,javascript setlocal tabstop=2
autocmd Filetype htmldjango,html,css,javascript setlocal softtabstop=2

" }}}

" Setup backup/undo dir  {{{ -------------------------------------------------

function! CreateDirs(dirs)
    for dir in split(a:dirs, ',')
        let cleaned_dir = substitute(dir, '/*$', '', '')
        if isdirectory(cleaned_dir) == 0
            echo "Creating dir: " . cleaned_dir
            call mkdir(cleaned_dir, 'p')
        endif
    endfor
endfunction

call CreateDirs(&backupdir)
call CreateDirs(&undodir)
call CreateDirs(&directory)

" }}}

" Syntastic required {{{ -----------------------------------------------------

if exists("*SyntasticStatuslineFlag")
    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*
endif

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" eslint required
let g:syntastic_javascript_checkers = ['eslint']

" }}}

" Buftabline required {{{ ----------------------------------------------------

let g:buftabline_indicators = 1

" }}}

" GitGutter required {{{ -----------------------------------------------------

set updatetime=200
set signcolumn=yes

" }}}

" Misc {{{ -------------------------------------------------------------------

" In vim env
if exists("$VILVL")
    let $VILVL = $VILVL + 1
else
    let $VILVL = 1
endif

" }}}
